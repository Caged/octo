{"body":"# Octo.js\r\n\r\nOcto.js is a simple, flexible, functional JavaScript library for interacting with [GitHub's v3 API](http://developer.github.com/v3).  It runs in node.js apps and the browser.  It supports Basic Auth, OAuth 2, pagination and more.\r\n\r\n**Requires [superagent](https://github.com/visionmedia/superagent)** &mdash; A lightweight library for supporting Ajax in the browser and HTTP in node.js.\r\n\r\nAll examples are written in [CoffeeScript](http://coffeescript.org), but Octo.js itself is written in JavaScript.\r\n\r\n## Quick Example\r\n\r\n``` coffeescript\r\napi = octo.api()\r\napi.get('/events').on('success', (res) ->\r\n  pubevents = res.body\r\n)()\r\n```\r\n\r\n`api.get` sets up a closure, so you'll need to invoke it before the request is sent.\r\n\r\n``` coffeescript\r\nevents = api.get('/events').perpage(50)\r\n  .on 'end', (res) ->\r\n    console.log api.limit()\r\n    console.log events.page() #1\r\n\r\nevents()\r\n```\r\n\r\n## Using in the browser\r\n\r\nDownload both [superagent](https://github.com/visionmedia/superagent) and octo.js and include them in the `<head>` of your document.\r\n\r\n``` html\r\n  <script src=\"superagent.js\"></script>\r\n  <script src=\"octo.js\"></script>\r\n```\r\n\r\n## Using in node.js\r\nInstall using `npm`.\r\n\r\n``` shell\r\nnpm install octo\r\n```\r\nRequire octo in your node.js script\r\n\r\n```coffeescript\r\nocto = require 'octo'\r\n```\r\n\r\n## Paging\r\nOne goal of octo.js was to make paging very simple.  Paging is built right into the library.\r\n\r\n``` coffeescript\r\nevents = api.get('/events').on('success', (res) ->\r\n  # the current page\r\n  events.page()\r\n\r\n  # requests the next page\r\n  events.next()\r\n\r\n  # requests the previous page\r\n  events.prev()\r\n)\r\nevents()\r\n```\r\n\r\nWhat if you want to start on a different page and limit the number of results per page?\r\n\r\n```coffeescript\r\n# Start on page 5 only returning 10 results per page\r\napi.get('/events').page(5).perpage(10)()\r\n```\r\n\r\n## Events\r\nOcto.js supports three events: `\"success\"`, `\"error\"` and `\"end\"`.  These callbacks are registered per pager.  This makes it easy to use the same callbacks for each page you request.\r\n\r\n* *`success`* - Response status was in the 200 range\r\n* *`error`* - Response wasn't in the 200 range\r\n* *`end`* - Fired at the end of every request, regarldess of status.\r\n\r\n```coffeescript\r\nevents = api.get('/events')\r\n  .on('success', (res) -> console.log(res.body))\r\n  .on('error', (res) -> console.log(res.body))\r\n  .on('end', (res) -> console.log(res.body))()\r\n```\r\n\r\n## Basic Auth\r\n``` coffeescript\r\napi = octo.api().username('foo').password('bar')\r\napi.get('/user').on('success', (res) -> console.log(res.body))()\r\n```\r\n\r\n## OAuth2\r\nIf you've [registered your script or app](https://github.com/settings/applications/new) as an OAuth app, you can use your token to authenticate with the api.\r\n\r\n```coffeescript\r\napi = octo.api().token('MY APP TOKEN')\r\napi.get('/user').on('success', (res) -> console.log(res.body))()\r\n```\r\n\r\nThis will work with any registered OAuth application, but will return *unauthorized* if you've not registered your application with GitHub.\r\n\r\n### Getting an OAuth 2 token from the API\r\nGitHub APIv3 allows you to programmatically fetch a token for use in scripts that might not be websites.  Grabbing an OAuth token **requires a username and password**.  Once you have a token, you can use it without a need for your username and password.\r\n\r\n```coffeescript\r\napi = octo.api().username('foo').password('bar')\r\napi.post('/authorizations', {note: 'my script', scopes: ['public_repo']})\r\n   .on('success', (res) -> console.log(res.body))()\r\n```\r\n\r\n## Checking Rate limits\r\nThe GitHub API has a rate limit that's returned with the headers of every request.  You can easily access this info to see your limit and how many requests you have left\r\n\r\n```coffeescript\r\napi.get('/users/caged/repos').on('success', ->\r\n  # Your limit per hour\r\n  console.log api.limit()\r\n\r\n  # Amount you have remaining in that hour\r\n  console.log api.remaining()\r\n)()\r\n```","tagline":"octo.js - JavaScript interface to GitHub API v3","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Octo","google":"UA-7881178-1"}